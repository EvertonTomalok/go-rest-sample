// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	entities "github.com/evertontomalok/go-rest-sample/internal/app/domain/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockService) Delete(personId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", personId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(personId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), personId)
}

// Get mocks base method.
func (m *MockService) Get(personId int64) (entities.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", personId)
	ret0, _ := ret[0].(entities.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(personId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), personId)
}

// Upsert mocks base method.
func (m *MockService) Upsert(person entities.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", person)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServiceMockRecorder) Upsert(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockService)(nil).Upsert), person)
}
